// Some reusable variables are scattered across the file for now
// TODO: move them to _properties.scss or another file?

// NOTE: add a bit of transparency for themes that require it
// (doesn't affect themes with no transparency)
.background {
  color: $fg_color;
  background-color: gtkalpha($bg_color, 0.999);

  &:backdrop {
    color: $backdrop_fg_color; 
    background-color: gtkalpha($backdrop_bg_color, 0.999);
  }
}

dnd { color: $fg-color; }

.normal-icons { -gtk-icon-size: 16px; }
.large-icons { -gtk-icon-size: 32px; }

image:disabled { -gtk-icon-filter: opacity(0.5); }

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:disabled {
    color: $disabled_fg_color;
    background-color: $disabled_bg_color;
  }

  &:selected {
    &:focus, & {
      @include selected_items('normal');

      border-radius: $viewitem_radius;
    }
    
    &:backdrop { @include selected_items('backdrop'); }
  }
}

// Ideally we'd extend %view in text too, but since some themes have gradients
// for view selected states, it's better to define textview text selection colors on their own
textview {
  > text {
    color: $text_color;
    background-color: $base_color;

    &:disabled {
      color: $disabled_text_color;
      background-color: $disabled_text_color;
    }

    &:selected {
      &:focus, & {
        color: $selected_text_color;
        background-color: $selected_text_bg_color;
      }
      
      &:backdrop {
        color: $backdrop_selected_text_color;
        background-color: $backdrop_selected_text_bg_color;
      }
    }

    background-color: transparent;

    > selection {
      color: $backdrop_selected_text_color;
      background-color: $backdrop_selected_text_bg_color;

      &:focus-within {
        color: $selected_text_color;
         background-color: $selected_text_bg_color;
      }
    }
  }

  &:drop(active) {
    caret-color: $drop_target_color;
  }
}

iconview {
  // TODO: have a flat version in case view has gradients?
  @extend .view;

  // TODO: outline_focus widget
  //@include focus-ring();

  &:drop(active) { box-shadow: none; }

  > dndtarget:drop(active) {
    // TODO: :drop color or something else?
    //border: 1px solid $selected_borders_color;
    border: 1px solid $drop_target_color;
  }
}

rubberband { @include rubberband(); }

flowbox {
  > rubberband { @include rubberband(); }

  > flowboxchild {
    padding: 3px;
    
    // TODO: focus_outline
    //@include focus-ring();

    &:selected {
      // TODO: use focus_outline
      //outline-color: $alt_focus_border_color;

      // TODO: use selected_items once ready
      color: $selected_fg_color;
      background-color: $selected_bg_color;
    }
  }
}

gridview {
  > rubberband { @include rubberband(); }

  > child {
    padding: 3px;
    transition: $focus_transition;

    // USE: outline-focus widget
    //@include focus-ring();

    &:selected {
      //outline-color: $alt_focus_border_color;

      // TODO: use 'selected' instead, or pass no value
      @include selected_items('normal');
      
      &:backdrop { @include selected_items('backdrop'); }
    }

    box { // cells
      border-spacing: 8px; // label separation
      margin: 12px;
    }
  }
}

// coverflow
coverflow cover {
  color: $text_color;
  background-color: $base_color;
  border: 1px solid if($variant == 'light', gtkshade($border_color, 0.6), gtkshade($border_color, 1.4));
}

label {
  // TODO: implement 'label.separator' once we know where separators will go 
  
  // TODO: use focus_outline
  &:selected { color: $selected_text_color; }
  
  > selection {
    color: $backdrop_selected_text_color;
    background-color: $backdrop_selected_text_bg_color;

    &:focus-within {
      color: $selected_text_color;
      background-color: $selected_text_bg_color;
    }
  }
  
  &:disabled { color: $disabled_fg_color;
    button & { color: inherit; }
    
    > selection { color: gtkmix($disabled_fg_color, $selected_text_bg_color, 0.5);
      &:backdrop { color: gtkmix($backdrop_disabled_fg_color, $backdrop_selected_text_bg_color, 0.5); }
    }
  }
  
  &.error { color: $error_color;
    &:disabled { color: gtkalpha($error_color, 0.5); }
  }
}

.dim-label {
  opacity: 0.6;
  text-shadow: none;	// NOTE: remove if any theme needs to override
}

// widget transitions (transitions defined in '_properties.scss'
button { transition: $button_transition;
  &:backdrop { transition: $backdrop_transition; }

  &.flat { transition: none;
    &:hover, &:checked { transition: $button_transition; }
  }
}
entry { transition: all 200ms $ease-out-quad;
  &:focus { transition: $focus_transition; }
}

flowbox > flowboxchild { transition: $focus_transition; }
gridview > child { transition: $focus_transition; }

searchbar > revealer > box:backdrop {
  transition: $backdrop_transition;
}

headerbar:backdrop { transition: $backdrop_transition; }

treeview > header > button {
  &, &:hover, &:active { transition: none; }
  
  // for treeview-like derive widgets
  button.dnd, header.button.dnd {
    &:active, &:selected, &:hover, & {
      transition: none;
    }
  }
}

popover.menu box.inline-buttons button.image-button.model {
  transition: none;
}

notebook > header > tabs > tab {
  transition: $focus_transition;
}

scrollbar { transition: $scrollbar_transition;
  &:backdrop { transition: $backdrop_transition; }

  > range > trough > slider { transition: $scrollbar_transition; }
  
  > range.fine-tune > trough > slider {
    transition: none;
  }
}

switch { transition: $focus_transition;
  > slider { transition: $button_transition; }
}

.view.content-view.check:not(list),
.content-view .tile check:not(list) {
  transition: 200ms;
}

checkbutton { transition: $focus_transition; }

scale > through { transition: $focus_transition;
  > slider {
    transition: $button_transition;
    transition-property: background, border, box-shadow;
  }
}

placesview .server-list-button > image,
placesview .server-list-button:checked > image {
  transition: 200ms $ease-out-quad;
}

colorswatch { transition: $focus_transition; }
plane { transition: $focus_transition; }

window.csd:backdrop { transition: $backdrop_transition; }

// MOVE: _properties.scss
$menu-margin : 4px;

// TODO: adjust margins?
window.assistant {
  .sidebar {
    padding: $menu-margin;
    border-top: 1px solid $border_color;
  }

  &.csd .sidebar { border-top-style: none; }

  .sidebar > label { padding: 6px 12px; }

  .sidebar > label.highlight {
    background-color: $selected_bg_color;
    border-radius: $menu_radius;
  }
}

window.aboutdialog image.large-icons { -gtk-icon-size: 128px; }

// TODO: move back to respective widgets
@include osd();

// spinner
@keyframes spin {
  to { -gtk-icon-transform: rotate(1turn); }
}

spinner {
  opacity: 0;   // only visible when rotating
  background: none;
  -gtk-icon-source: -gtk-icontheme("process-working-symbolic");

  &:checked {
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled { opacity: 0.5; }
  }
}

// typography
.large-title {
   font-weight: 300;
   font-size: 24pt;
}
.title-1 {
   font-weight: 800;
   font-size: 20pt;
}
.title-2 {
   font-weight: 800;
   font-size: 15pt;
}
.title-3 {
   font-weight: 700;
   font-size: 15pt;
}
.title-4 {
   font-weight: 700;
   font-size: 13pt;
}
.heading {
   font-weight: 700;
   font-size: 11pt;
}
.body {
   font-weight: 400;
   font-size: 11pt;
}
.caption-heading {
   font-weight: 700;
   font-size: 9pt;
}
.caption {
   font-weight: 400;
   font-size: 9pt;
}

// TODO: rework like button
entry {
  @include entry("base");
  
  caret-color: currentColor;

  &:focus-within {
    @include entry("focus");
    
    > placeholder { opacity: 0; }
  }

  &:disabled { @include entry("disabled");
    &:backdrop { @include entry("disabled-backdrop"); }
  }
  &:backdrop { @include entry("backdrop"); }

  &.flat,
  &.flat:focus {
    @include entry("flat");
  }

  > text > selection {
    background-color: $backdrop_selected_text_bg_color;
    color: $backdrop_selected_text_color;
    
    &:focus-within {
      background-color: $selected_text_bg_color;
      color: $selected_text_color;
    }
  }
  
  > image {
    &.left { padding-right: 5px; }
    &.right { padding-left: 5px; }
    
    color: mix($fg_color, $base_color, 80%);
    
    &:hover { color: $fg_color; }
    &:active { color: $selected_bg_color; }
  }
  
  &.password image.caps-lock-indicator {
    color: mix($backdrop_fg_color, $backdrop_base_color, 80%);
  }

  > progress { margin-bottom: 2px; border-color: transparent; }
    
  progress > trough > progress {
    border-radius: 0;
    border-width: 0 0 2px;
    border-style: solid;
    border-color: $selected_bg_color;
    background-color: transparent;
    background-image: none;
    box-shadow: none;
    margin-left: 2px;
    margin-right: 2px;
  }

  &.search { border-radius: 40px; }

  &:drop(active),
  &:drop(active):focus-within {
    border-color: $drop_target_color;
    box-shadow: inset 0 0 0 1px $drop_target_color;
  }
}

treeview entry {
  &:focus-within {
    &:dir(rtl), &:dir(ltr) { // specificity bump
      background-color: $base_color;
      transition-property: color, background;
    }
  }

  &.flat, & {
    border-radius: 0;
    background-image: none;
    background-color: $base_color;

    &:focus-within { border-color: $selected_bg_color; }
  }
}

// editable label
editablelabel > stack > text {
  // @include entry(normal);

  // TODO: use new mixin selection
  > selection {
    color: transparent; background-color: $selected_bg_color;
    
    // TODO: extend entry?
    &:focus-within { color: $fg_color; background-color: $selected_text_bg_color; }
  }
}

// TODO: rework button() mixin to process all types of buttons
button { @include normal_buttons();
  &.flat { @include flat_buttons(); }
}

@include destructive_button();
@include suggested_button();

// MOVE: _colors*.scss
$link_visited_color : gtkmix($link_color, $fg_color, 0.2);

// links
%link,
link {
  color: $link_color;
  text-decoration: underline;

  &:visited { color: $link_visited_color;
    *:selected & { color: gtkmix($selected_fg_color, $link_visited_color, 0.6); }
  }

  &:hover { color: gtkshade($link_color, 1.1);
    *:selected & { color: gtkmix($selected_fg_color, $link_color, 0.9); }
  }

  &:active { color: $link_color;
    *:selected & { color: gtkmix($selected_fg_color, $link_color, 0.8); }
  }

  &:backdrop:hover,
  &:backdrop:hover:selected, & { color: gtkmix($link_color, $backdrop_selected_bg_color, 0.3); }
  
  &:disabled { color: transparentize(desaturate($link_color, 100%), 0.2); }

  @at-root %link_selected,
  &:selected, *:selected & { color: gtkmix($selected_fg_color, $link_color, 0.8); }
}

button.link {
  @extend %link;
  
  &, &:hover, &:active, &:checked {
    // @include button_flat();  // TODO: use button(flat) once rework is complete 
    
    text-shadow: none;
  }
  
  > label { text-decoration: underline; }
}

@include spinbutton();
// @include combobox();   CREATE: new mixin combobox

@include toolbar();

searchbar {
  border-width: 0 0 1px 0;
  border-style: solid;
  border-color: $border_color;
  background-color: gtkshade($bg_color, 0.95);
}

.nautilus-window .searchbar-container {
  margin-top: -1px;
}

@include infobar();
@include headerbar();
// NOTE: titlebuttons are defined in _headerbar.scss, should it go to a separate file?
// NOTE: should window.devel be implemented?

// pathbar
pathbar > button {
  &.text-button, &.image-button, & {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.text-button.imagebutton > label {
    padding-left: 0;
    padding-right: 0;

    &:last-child { padding-right: 8px; }
    &:first-child { padding-left: 8px; }
  }

  image {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.slider-button {
    padding-left: 0;
    padding-right: 0;
  }
}

// treeview
// TODO: move elsewhere?
$treeview_border: gtkmix($border_color, $base_color, 0.2);
$treeview_backdrop_border: gtkmix($backdrop_border_color, $base_color, 0.2);

columnview.view, treeview.view {
  border-left-color: $treeview_border; // tree line color
  border-top-color:  $treeview_border; // grid line border color

  // TODO: outline widget
  //@include focus-ring();

  > rubberband { @include rubberband(); }

  &:selected {
    &, &:focus { @include selected_items('normal'); 
      &:backdrop { @include selected_items('backdrop'); }

      border-radius: 0;
    }
  }

  &:disabled { color: $disabled_fg_color;
    &:backdrop { color: $backdrop_disabled_fg_color; }

    &:selected { @include selected_items('disabled');
      &:backdrop { @include selected_items('backdrop-disabled'); }
    }
  }

  &.separator {
    min-height: 2px;
    color: $treeview_border;
  }

  &:backdrop {
    border-left-color: $treeview_backdrop_border;
    border-top: $treeview_backdrop_border;
  }

  &:drop(active) { box-shadow: none; }

  > dndtarget:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: $drop_target_color;

    &.after { border-top-style: none; }
    &.before { border-bottom-style: none; }
  }

  &.expander {
    // only one size applies at a time, based on orientation
    min-width: 16px;
    min-height: 16px;
    color: mix($text_color, $base_color, 70%);

    &:hover { color: $text_color; }
    &:selected { color: gtkmix($selected_fg_color, $selected_bg_color, 0.3);
      &:hover { color: $selected_fg_color; }
    }

    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }
  }

  &.progressbar {
    color: $selected_fg_color;
    background-color: $selected_bg_color;
    background-image: image($selected_bg_color);
    box-shadow: none;

    &:selected {
      &:focus, & {
        color: $selected_bg_color;
        background-image: image($selected_fg_color);

        &:backdrop {
          color: $backdrop_selected_bg_color;
          background-color: $backdrop_selected_fg_color;
        }
      }
    }
  }

  &.trough {
    background-color: gtkalpha($fg_color, 0.9);

    &:selected, &:selected:focus {
      background-color: gtkalpha($selected_fg_color, 0.3);
    }
  }

  // TODO: move to mixin to make more customizable (ex. Windows xP Luna)
  > header > button {
    $column_header_fg_color: mix($fg_color, $base_color, 50%);

    @extend %column_header_button;

    color: $column_header_fg_color;
    background-color: $base_color; //$bg_color?
    font-weight: bold;
    text-shadow: none;
    box-shadow: none;

    &:hover {
      @extend %column_header_button;

      color: mix($column_header_fg_color, $fg_color, 50%);
      box-shadow: none;
      transition: none;
    }

    &:active {
      @extend %column_header_button;

      color: $fg_color;
      transition: none;
    }
    
    sort-indicator {
      min-height: 16px;
      min-width: 16px;

      &.ascending { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }
      &.descending { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }
  }

  button.dnd, header.button.dnd {
    &:active, &:selected, &:hover, & {
      padding: 0 6px;
      color: $selected_fg_color;
      background-image: none;
      background-color: $selected_bg_color;
      border-style: none;
      border-radius: 0;
      box-shadow: inset 0 0 0 1px $selected_fg_color;
      text-shadow: none;
      transition: none;
    }
  }

  acceleditor > label {
    background-color: $selected_bg_color;
  }
}

%column_header_button {
  padding: 0 6px;
  background-image: none;
  border-style: none none solid solid;
  border-color: $treeview_border;
  border-radius: 0;
  text-shadow: none;

  &:disabled {
    border-color: $bg_color;
    background-image: none;
  }

  &:last-child, &:last-child:backdrop { border-right-style: none; }
}

popover {
  &.background,
  &.background:backdrop {
    font: initial;
    background-color: transparent;
  }
  
  > arrow,
  > contents {
    @include popover();
  }

  > contents {
    padding: $popover_padding;
    border-radius: $popover_radius;

    > list,
    > .view,
    > toolbar {
      border-style: none;
      background-color: transparent;
    }

    // TODO: move to separators
    separator {
      margin: 3px;
      background-color: $border_color;
    }
  }
}

magnifier { background-color: $base_color; }

// menus, mostly sizing stuff, styling is handled by popover()
popover.menu {
  > contents {
    min-width: 120px;
    padding: $menu_padding;
  }
  
  box.inline-buttons {
    padding: 0px $menuitem_padding;
    
    // TODO: button.image-button.model?
  }
  
  modelbutton {
    @include modelbutton("base");

    &:hover, &:selected { @include modelbutton("hover"); }
    &:disabled { @include modelbutton("disabled"); }

    > image { padding-right: 4px; }

    arrow {
      background: none;
      min-width: 16px;
      min-height: 16px;
      opacity: 0.3;     // libadwaita uses a global var for image opacity

      &:hover { background: none; }
      &:disabled { opacity: 0.15; }   // libadwaita uses a global var for dimmed disabled images

      &.left { -gtk-icon-source: -gtk-icontheme("go-previous-symbolic"); }
      &.right { -gtk-icon-source: -gtk-icontheme("go-next-symbolic"); }
    }
  }
  
  separator { margin: 6px 0; }
  list separator { margin: 0; }
  
  // nested submenus
  & & {
    padding: 0 0 $menu_padding 0;

    > contents {
      margin: 0;
      border-radius: $menu_radius; // including top
    }
  }
  
  // TODO: menu lists?
  
  accelerator { color: gtkalpha(currentColor, 0.55);
    &:hover { color: gtkalpha($selected_fg_color, 0.8); }
    &:disabled { color: gtkmix($popover_fg_color, $popover_bg_color, 0.5); }
    
    &:dir(ltr) { margin-left: $menuitem_padding; }    // TODO: modelbutton_padding?
    &:dir(rtl) { margin-right: $menuitem_padding; }
  }
}

menubar { @include menubar();
  > item { @include menubaritem();
    &:selected { @include menubaritem("hover"); }
    &:disabled { @include menubaritem("disabled"); }
    &:backdrop { @include menubaritem("backdrop"); }
  }
}

@include notebook();  // TODO: modernize

// scrollbars
// TODO: find a more elegant solution (half the themes have broken fine-tune scrollbars)
$_slider_ft_size : $scrollbar_slider_size - (2 * $scrollbar_slider_ft_margin);

scrollbar {
  @include scrollbar();
  
  > range > trough > slider {
    @include scrollbar_slider();
  }

  // TODO: are directional fills necessary? use .top, .bottom, .left or .right instead?
  &.horizontal {
    @include scrollbar("horiz");
    
    > range > trough > slider { @include scrollbar_slider("horiz"); }
  }
  
  &.vertical {
    @include scrollbar("vert");
    
    > range > trough > slider { @include scrollbar_slider("vert"); }
  }
  
  &.horizontal > range > trough > slider { min-width: $scrollbar_slider_min_length; }
  &.vertical > range > trough > slider { min-height: $scrollbar_slider_min_length; }

  > range.fine-tune {
    > trough > slider {
      min-width: $_slider_ft_size;
      min-height: $_slider_ft_size;
      border-radius: $scrollbar_slider_radius;
    }

    &.horizontal > trough > slider {
      margin-top: $scrollbar_slider_ft_margin;
      margin-bottom: $scrollbar_slider_ft_margin;
    }

    &.vertical > trough > slider {
      margin-left: $scrollbar_slider_ft_margin;
      margin-right: $scrollbar_slider_ft_margin;
    }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      @include scrollbar("hint");

      > range > trough > slider {
        @include scrollbar_slider("hint");
      }

      &.horizontal > range > trough > slider {
        min-width: $scrollbar_slider_min_length;
        min-height: $scrollbar_indicator_size;
      }

      &.vertical > range > trough > slider {
        min-width: $scrollbar_indicator_size;
        min-height: $scrollbar_slider_min_length;
      }
    }

    &.dragging, &.hovering { opacity: 1; }
  }
  
  // TODO: scrollbar buttons don't exist in GTK4, find a way to simulate them?
  /*
  &.horizontal button {
    &.down { -gtk-icon-source: -gtk-icontheme("pan-right-symbolic"); }
    &.up { -gtk-icon-source: -gtk-icontheme("pan-left-symbolic"); }
  }

  &.vertical button {
    &.down { -gtk-icon-source: -gtk-icontheme("pan-down-symbolic"); }
    &.up { -gtk-icon-source: -gtk-icontheme("pan-up-symbolic"); }
  }
  */
}

treeview ~ scrollbar.vertical {
  border-top: 1px solid $border_color;
  margin-top: -1px;
}

// switch
switch {
  @include switch();
  
  // TODO: outline

  > slider { @include switch_slider(); }
  &:hover > slider { @include switch_slider("hover"); }
  &:checked > slider { @include switch_slider("checked"); }
  &:checked:backdrop > slider { @include switch_slider("checked-backdrop"); }
  &:disabled > slider { @include switch_slider("disabled"); }
  &:disabled:backdrop > slider { @include switch_slider("disabled-backdrop"); }
  &:backdrop > slider { @include switch_slider("backdrop"); }  
}

@include checkradio();  // TODO: include special cases, like menu/modelbutton, treeview, etc.

// scale
$_marks_length : 6px;
$_marks_distance: 6px;
$_scale_padding : 12px;
$_finetune_offset : $scale_slider_margin - $scale_slider_ft_margin;

scale {
  min-height: 10px;
  min-width: 10px;
  padding: $_scale_padding;

  > fill,     // mostly needed for OSD widgets
  > trough {
    // TODO: outline widget

    @include scale_trough();  // TODO: support vertical troughs/highlights without @at-root?
  }

  > trough > highlight {
    @include scale_highlight();
  }

  > trough > slider {
    @include scale_slider();
  }
  
  // directional sliders
  &.horizontal {
    > trough > slider {
      @include scale_slider("horiz");
    }
    &.marks-after:not(.marks-before) > trough > slider {
      @include scale_slider("bottom");
    }
    &.color > trough > slider,
    &.marks-before:not(.marks-after) > trough > slider {
      @include scale_slider("top");
    }
  }
  
  &.vertical {
    > trough > slider {
      @include scale_slider("vert");
    }
    &.color:dir(ltr) > trough > slider,
    &.marks-after:not(.marks-before) > trough > slider {
      @include scale_slider("right");
    }
    &.color:dir(rtl) > trough > slider,
    &.marks-before:not(.marks-after) > trough > slider {
      @include scale_slider("left");
    }
  }

  &.fine-tune {
    &.horizontal {
      padding-top: $_scale_padding - $_finetune_offset;
      padding-bottom: $_scale_padding - $_finetune_offset;
      min-height: 16px;
    }

    &.vertical {
      // in gtk4-widget-factory this causes issues, turn off for now
      //padding-left: $_scale_padding - $_finetune_offset;
      //padding-right: $_scale_padding - $_finetune_offset;
      min-width: 16px;
    }

    > trough,
    > trough > fill,
    > trough > highlight {
      border-radius: $scale_trough_radius * 2;
    }

    // TODO: move to slider? human, solaris-9, windows-10-fluent have margin issues with fine-tune state
    > trough > slider { margin: -$scale_slider_ft_margin; }
  }

  > value {
    color: gtkalpha(currentColor, 0.55);
    font-feature-settings: "tnum";
  }

  > marks { color: gtkalpha(currentColor, 0.55); }

  &.horizontal {
    > marks {
      &.top { margin-bottom: $_marks_distance; }
      &.bottom { margin-top: $_marks_distance; }

      indicator {
        min-width: 1px;
        min-height: $_marks_length;
        background-color: currentColor;
      }
    }

    > value.left  { margin-right: 9px; }
    > value.right { margin-left: 9px; }

    &.fine-tune > marks {
      &.top { margin-top: 3px; }
      &.bottom { margin-bottom: 3px; }

      indicator { min-height: ($_marks_length - 3px); }
    }
  }

  &.vertical {
    > marks {
      &.top { margin-right: $_marks_distance; }
      &.bottom { margin-left: $_marks_distance; }

      indicator {
        min-height: 1px;
        min-width: $_marks_length;
        background-color: currentColor;
      }
    }

    > value.top { margin-bottom: 9px; }
    > value.bottom { margin-top: 9px; }

    &.fine-tune > marks {
      &.top { margin-left: 3px; }
      &.bottom { margin-right: 3px; }

      indicator { min-height: ($_marks_length - 3px); }
    }
  }
}

@include progressbar();
@include levelbar();

window.dialog.print {
  drawing {
    color: $fg_color;
    background: none;
    border: none;
    padding: 0;

    paper {
      background: white;
      color: #2e3436;   // dark grey
      border: 1px solid $border_color;
    }
  }

  .dialog-action-box { margin: 12px; }
}

// frame
frame, .frame { border: 1px solid $border_color; }

frame { border-radius: $global_radius;
  > label { margin: 4px; }
}

// actionbar
actionbar > revealer > box {
  padding: 6px;
  border-top: 1px solid $border_color;

  &, > box.start, > box.end { border-spacing: 6px; }
}

// scrolled window & overshoots
scrolledwindow {
  > overshoot {
    &.top { @include overshoot(top); }
    &.bottom { @include overshoot(bottom); }
    &.left { @include overshoot(left); }
    &.right { @include overshoot(right); }
  }
}

// TODO: move separators to their respective controls?
@include separators();

listview row {
  &:hover { @include listview("hover"); }
  &:active { @include listview("active"); }
  &:backdrop { @include listview("backdrop"); }
  
  &:selected { @include listview("selected");
    &:hover { @include listview("selected-hover"); }
    &:active { @include listview("selected-active"); }
    &:disabled { @include listview("disabled"); }
    &:backdrop { @include listview("selected-backdrop");
      &:hover { @include listview("selected-backdrop-hover"); }  // only used by windows 7-like themes
    }
  }
}

// columnview rows (should this be moved to treeview?)
columnview {
  // move padding to child cells
  > listview > row {
    padding: 0;

    // align horizontal sizing with header buttons
    > cell {
      padding: 8px 6px;

      &:not(:first-child) {
        border-left: 1px solid transparent;
      }
    }
  }

  // make column separators visible when :show-column-separators is true
  &.column-separators > listview > row > cell {
    //border-left-color: $_treeview_borders_color;
    border-left-color: $border_color;
  }

  // shrink vertically for .data-table
  &.data-table > listview > row > cell {
    padding-top: 2px;
    padding-bottom: 2px;
  }
}

treeexpander { border-spacing: 4px; }

/* SAMPLE
//vbox and hbox separators
separator {
  background: lighten($border_color, 5%);
  min-width: 1px;
  min-height: 1px;
}*/

// data tables are treeview-like tables with individual focusable cells
$focus_border_color : transparentize($selected_bg_color, 0.45);

columnview row:not(:selected) cell editablelabel:not(.editing):focus-within {
  outline: 2px solid $focus_border_color;
}

columnview row:not(:selected) cell editablelabel.editing:focus-within {
  outline: 2px solid $selected_bg_color;
}

columnview row:not(:selected) cell editablelabel.editing text selection {
  background-color: $backdrop_selected_bg_color;
  color: transparent;
  
  &:focus-within { color: $fg_color; background-color: $selected_text_bg_color; }
}

// rich lists are a large list usually containing lots of widgets, generally other widgets than just labels/text
.rich-list {
  & > row {
    padding: 8px 12px;
    min-height: 32px; /* should be tall even when only containing a label */

    & > box { border-spacing: 12px; }
  }
}

@include notifications();

// expander
expander {
  min-width: 16px;
  min-height: 16px;
  -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
  
  &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }
  &:disabled { color: $disabled_fg_color; }
  &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
}

expander-widget {
  // CREATE: mixin outline()
  //@include focus-ring("> box > title");

  > box > title {
    border-radius: $global_radius;

    &:hover > expander {
      color: lighten($fg_color, 30%); // only lightens the icon
    }
  }
}

// calendar
calendar {
  border-width: 1px;
  border-radius: $global_radius;
  border-style: solid;
  border-color: $border_color;
  color: $fg_color;

  > header {
    border: none;
    border-bottom: 1px solid gtkshade($border_color, 1.1);
    color: $text_color;

    > button {
      border: none;
      box-shadow: none;
      background: none;
      border-radius: 0;
      
      // TODO: hover and active states
      &:hover { color: $fg_color; }
      &:backdrop { color: $backdrop_text_color; }
      &:disabled { color: $disabled_fg_color; }
    }
  }
  
  > grid {
    > label.today {
      box-shadow: inset 0px -2px $border_color;

      &:selected { box-shadow: none; }
    }

    > label:focus {
      outline-color: $border_color;
      outline-offset: -2px;
      outline-width: 2px;
      outline-style: solid;
    }

    > label.day-number {
      padding: 3px;   // originally 4px

      &:selected{
        @include selected_items("normal");
        border-radius: $viewitem_radius;
      }

      &:checked {
        background-color: gtkalpha($selected_bg_color, 0.3);
      }
    }

    > label.day-number.other-month {
      color: gtkalpha(currentColor, 0.3);
    }
  }
}

@include dialogs();

// sidebars
.sidebar {
  // FIXME: not working on nautilus
  background-color: $sidebar_bg_color;

  &:not(separator) {
    @at-root %sidebar_left,
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      border-right: 1px solid $border_color;
      border-left-style: none;
    }

    @at-root %sidebar_right,
    &:dir(rtl),
    &.right {
      border-left: 1px solid $border_color;
      border-right-style: none;
    }
  }

  listview.view,
  list { background-color: transparent; }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; }}
}

// TODO: include more sidebar_items states in the future
stacksidebar {
  //not a regular list
  list.separators:not(.horizontal) > row:not(.separator) {
    border-bottom: none;
  }
  row {
    padding: 10px 4px;
    // is this a good idea?
    @include sidebar_items('normal');
    
    // TODO: implement
    //@include focus-ring();

    > label {
      padding-left: 6px;
      padding-right: 6px;
    }

    &.needs-attention > label {
      // TODO: implement?
      //@extend %needs_attention;
      background-size: 6px 6px, 0 0;
    }
    &:selected {
      @include sidebar_items('selected');
      
      border-radius: $viewitem_radius;
    }
    &:selected:hover:dir(ltr), &:selected:hover:dir(rtl) {
      @include sidebar_items('selected-hover');
    }
    &.activatable:active, &.activatable:selected:active {
      box-shadow: none; // #3413
    }
  }
}

// TODO: adjust colors
separator.sidebar { background-color: $border_color; }

// TODO: import .navigation-sidebar, placessidebar, placesview, etc.

@include paned();

video {
  & image.osd {
    min-width: 64px;
    min-height: 64px;
    border-radius: 32px;  // TODO: change based on theme
  }
  
  background: black;
}

@include tooltip();

// color chooser 

// from adwaita comments:
// This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
// is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
// applied to the overlay box.

// MOVE: to properties.scss?
$colorswatch_radius : 2px;

// colorwatch
colorswatch {
  &.top {
    border-top-left-radius: $colorswatch_radius + 0.5px;
    border-top-right-radius: $colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $colorswatch_radius;
      border-top-right-radius: $colorswatch_radius;
    }
  }
  &.bottom {
    border-bottom-left-radius: $colorswatch_radius + 0.5px;
    border-bottom-right-radius: $colorswatch_radius + 0.5px;

    overlay {
      border-bottom-left-radius: $colorswatch_radius;
      border-bottom-right-radius: $colorswatch_radius;
    }
  }

  &.left, &:first-child:not(.top) {
    border-top-left-radius: $colorswatch_radius + 0.5px;
    border-bottom-left-radius: $colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $colorswatch_radius;
      border-bottom-left-radius: $colorswatch_radius;
    }
  }

  &.right, &:last-child:not(.bottom) {
    border-top-right-radius: $colorswatch_radius + 0.5px;
    border-bottom-right-radius: $colorswatch_radius + 0.5px;

    overlay {
      border-top-right-radius: $colorswatch_radius;
      border-bottom-right-radius: $colorswatch_radius;
    }
  }

  &.dark {
    > overlay { color: gtkalpha($light_shadow, 0.7); }
    &.activatable:hover > overlay { border-color: gtkalpha($dark_shadow, 0.5); }
  }

  &.light
    > overlay { color: gtkalpha($light_shadow, 0.7);
    &.activatable:hover > overlay { border-color: gtkalpha($dark_shadow, 0.3); }
  }
  
  &:drop(active) {
    box-shadow: none;

    &.light > overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px $border_color,
                  inset 0 0 0 1px $drop_target_color;
    }

    &.dark > overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px $border_color,
                  inset 0 0 0 1px $drop_target_color;
    }
  }

  > overlay { border: 1px solid gtkalpha($dark_shadow, 0.15); }
  &.activatable:hover > overlay { background-color: gtkalpha($light_shadow, 0.2); }

  &#add-color-button {
    border-radius: $colorswatch_radius 0 0 $colorswatch_radius;
    
    &:only-child { border-radius: $colorswatch_radius; }
    
    // TODO: use regular style buttons here instead of old shadow-based colors?
    background-clip: padding-box;
    border-color: gtkalpha($dark_shadow, 0.1);
    background-color: gtkshade($bg_color, 0.95);
    color: $fg_color;

    &:hover {
      border-color: gtkalpha($dark_shadow, 0.3);
      background-color: gtkshade($bg_color, 0.90);
      color: $fg_color;
    }
    
    /* SAMPLE
    > overlay {
      @include button(normal);
    }

    &.activatable:hover > overlay {
      @include button(hover);
    }*/
  }

  &:disabled {
    opacity: 0.5;

    overlay {
      border-color: gtkalpha($dark_shadow, 0.6);
      box-shadow: none;
    }
  }
  
  row:selected & { box-shadow: 0 0 0 2px $selected_fg_color; }

  &#editor-color-sample { border-radius: $colorswatch_radius;
    > overlay { border-radius: $colorswatch_radius + 0.5px; }
  }
  
  // colorscale popup
  // TODO: figure out the correct radius to apply here
  .popover.osd { border-radius: $menu_radius; }
}

// TODO: move to _button.scss
button.color {
  padding: 0;

  colorswatch:first-child:last-child, colorswatch:first-child:last-child overlay {
    margin: 4px;
    border-radius: 0;
  }
}

// Misc.
.content-view {
  background-color: $base_color;

  // TODO: use new mixin selection
  &:hover { background-color: gtkalpha($selected_bg_color, 0.6); }
  
  .tile {
    background-color: $base_color;
    border-radius: 0;
    padding: 0;
    margin: 2px;
    
    &:active, &:selected { background-color: $selected_bg_color; }
    &:disabled { background-color: $disabled_bg_color; }  
  }
  
  > rubberband { @include rubberband(); }
}

.scale-popup {
  // TODO: make osd expandable or variable based on parameters
  //.osd & { @extend %osd; }

  .osd & button.flat {  //adwaita FIXME: quick hack, redo properly
    border-style: none;
    border-radius: 5px;
  }

  // NOTE: how to test this?
  // TODO: use new mixin for flat button
  /* SAMPLE
  button { // +/- buttons on GtkVolumeButton popup
    &:hover {
      @extend %undecorated_button;
      background-color: transparentize($fg_color,0.9);
      border-radius: 5px;
    }
  }
  */
}

// CREATE: new mixin combobox
arrow, combobox arrow {
  color: gtkalpha(currentColor, 0.75);
  -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
  min-height: 16px;
  min-width: 16px;
}

.monospace { font-family: monospace; }

// TODO: move to _button.scss
// NOTE: seems to be duplicated in _sidebar for some themes too
button.circular, button.circular-button {
  padding: 0;
  min-width: 16px;
  min-height: 24px;
  padding: 2px 6px;
  border-radius: 50%;
}

// TODO: :drop should be implemented in the widget file
filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}

// TODO: move to _button.scss / new mixin combobox?
combobox:drop(active) button.combo {
  box-shadow: none;
  color: $drop_target_color;
  border-color: $drop_target_color;
}

// TODO: where to move this? It it still valid?
:not(decoration):not(window):drop(active),
:not(decoration):not(window):drop(active):focus {
  border-color: $drop_target_color;
  box-shadow: inset 0 0 0 1px $drop_target_color;
  caret-color: $drop_target_color;
}

// Misc. end

// window decorations
window {
  border-width: 0px;    // necessary to get rounded borders
  padding: $window_padding;   // normally set to 0; used for themes with 3D window edges (ex. Win 95)

  &.csd {
    box-shadow: $focus_wm_shadow;
    margin: 0px;
    border-radius: $window_radius $window_radius 0 0;
    
    &:backdrop {
      box-shadow: $backdrop_wm_shadow;
      transition: $backdrop_transition;
    }

    &.popup {
      border-radius: $menu_radius;
      box-shadow: $popup_wm_shadow;
    }

    &.dialog.message {
      border-radius: $window_radius;
      box-shadow: 0 1px 2px gtkalpha($wm_shadow, 0.2),
                  0 0 0 1px gtkalpha($wm_shadow, 0.35);  // TODO: is this an ok value?
    }
  }

  // resize window handles (when no resize preview available)
  &.solid-csd {
    margin: 0;
    padding: 4px;
    border: solid 1px $border_color;
    border-radius: 0;
    box-shadow: inset 0 0 0 4px $border_color,
                inset 0 0 0 3px $headerbar_bg_color;

    &:backdrop {
      box-shadow: inset 0 0 0 4px $border_color,
                  inset 0 0 0 3px $backdrop_bg_color;
    }
  }

  &.maximized,
  &.fullscreen { border-radius: 0; box-shadow: none; }

  &.tiled,
  &.tiled-top,
  &.tiled-left,
  &.tiled-right,
  &.tiled-bottom {
    border-radius: 0;
    box-shadow: 0 0 0 1px gtkalpha($wm_shadow, 0.35),    // TODO: tweak if necessary
                0 0 0 20px transparent;   // resize area

    &:backdrop {
      box-shadow: 0 0 0 1px gtkalpha($wm_shadow, 0.2),  // TODO: tweak if necessary
                  0 0 0 20px transparent; // resize area
    }
  }

  &.popup { box-shadow: none; }

  // server-side decorations as used by mutter
  &.ssd { box-shadow: 0 0 0 1px gtkalpha($wm_shadow, 0.4); } // just doing borders, wm draws actual shadows
}

tooltip.csd {
  border-radius: $tooltip_radius;
  box-shadow: none;
}

// CREATE: new mixin touchselect (touch copy and paste control), or make all themes share a common implementation
// @include touchselect();

// keyboard shortcuts screen
shortcuts-section { margin: 20px; }

.shortcuts-search-results { margin: 20px; border-spacing: 24px; }

// shortcut window keys
shortcut { border-spacing: 6px; }

shortcut > .keycap {
  min-width: 20px;
  min-height: 25px;
  margin-top: 2px;
  padding-bottom: 3px;
  padding-left: 6px;
  padding-right: 6px;

  color: $fg_color;
  background-color: $base_color;
  border: 1px solid $border_color;
  border-radius: $global_radius;
  box-shadow: if($variant == 'light', inset 0 -3px mix($base_color, $bg_color, 20%), inset 0 -3px mix($border_color, $base_color, 60%));
  font-size: smaller;
}

// TODO: move to _button.scss
stackswitcher > button.text-button { min-width: 100px; }

stackswitcher.circular {
  border-spacing: 12px;
  
  > button.circular,
  > button.text-button.circular {
    min-width: 32px;
    min-height: 32px;
    padding: 0;
  }
}

// outline for low res icons
.lowres-icon {
    -gtk-icon-shadow: 0 -1px gtkalpha($dark_shadow,0.05),
      1px 0 gtkalpha($dark_shadow,0.1),
      0 1px gtkalpha($dark_shadow,0.3),
      -1px 0 gtkalpha($dark_shadow,0.1);
}

// dropshadow for large icons
.icon-dropshadow {
  -gtk-icon-shadow: 0 1px 12px gtkalpha($dark_shadow,0.05),
      0 -1px gtkalpha($dark_shadow,0.05),
      1px 0 gtkalpha($dark_shadow,0.1),
      0 1px gtkalpha($dark_shadow,0.3),
      -1px 0 gtkalpha($dark_shadow,0.1);
}

// emoji selector
$padding : 6px;

popover.emoji-picker > contents { padding: 0; }

.emoji-searchbar {
  padding: $padding;
  border-spacing: $padding;
  border-bottom: 1px solid $border_color;
}

.emoji-toolbar {
  padding: $padding;
  border-spacing: $padding;
  border-top: 1px solid $border_color;
}

button.emoji-section {
  border-color: transparent;
  border-width: 3px;
  border-style: none none solid;
  border-radius: 0;

  padding: 3px 0 0;
  min-width: 32px;
  min-height: 28px;

  // reset styles inherited from button
  background: none;
  box-shadow: none;
  text-shadow: none;

  &:hover { border-color: $border_color; }
  &:checked { border-color: $selected_bg_color; }
}

popover.emoji-picker emoji {
  font-size: x-large;
  padding: $padding;
  border-radius: $global_radius;

  &:focus,
  &:hover {
    background: $selected_bg_color;

    // TODO: add shadows on hover?
    /* SAMPLE
    @if $contrast == 'high' {
      box-shadow: inset 0 0 0 1px $border_color;
    }*/
  }
}

emoji-completion-row > box {
  border-spacing: 10px;
  padding: 2px 10px;
}

emoji-completion-row:focus,
emoji-completion-row:hover {
  background-color: $selected_bg_color;
  color: $selected_fg_color;
}

emoji-completion-row emoji:focus,
emoji-completion-row emoji:hover {
  background-color: $selected_bg_color;
}

// no idea what this does. Autocomplete?
popover.entry-completion > contents { padding: 0; }

@include statusbar();

// legacy stuff

// TODO: include '> image' nodes in affected widgets
//@include images();
.floating-bar {
  @include floating_bar();
  
  &.top {
    border-top-width: 0px;
    border-top-right-radius: 0px;
    border-top-left-radius: 0px;
  }

  &.bottom {
    border-bottom-width: 0px;
    border-bottom-right-radius: 0px;
    border-bottom-left-radius: 0px;
  }
  
  &.top, &.bottom {
    &.left {
      border-left-width: 0px;
      border-bottom-left-radius: 0px;
      border-top-left-radius: 0px;
    }

    &.right {
      border-right-width: 0px;
      border-top-right-radius: 0px;
      border-bottom-right-radius: 0px;
    }
  }
}  

.terminal-screen, terminal-window, vte-terminal {
  background-color: $terminal_bg_color;
  color: $terminal_fg_color;
}

// TODO: make widgets handle their own linked styles
@include linked_widgets();
@include linked_styles();

// desktop theme rules
// remove for now, since there's no GTK4 support for other desktops at the moment?
